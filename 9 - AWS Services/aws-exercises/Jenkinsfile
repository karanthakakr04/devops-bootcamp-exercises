#!/usr/bin/env groovy

pipeline {
  agent any

  tools {
    nodejs 'node'
  }

  environment {
    DOCKERHUB_REPO = credentials('DOCKERHUB_REPO')
    DOCKERHUB_USERNAME = credentials('DOCKERHUB_USERNAME')
    GITHUB_REPO_URL = credentials('GITHUB_REPO_URL')
    DEPLOYMENT_USER = credentials('DEPLOYMENT_USER')
    DEPLOYMENT_SEVER = credentials('DEPLOYMENT_SEVER')
    DEPLOYMENT_PATH = credentials('DEPLOYMENT_PATH')
  }

  stages {
    stage('Increment Version') {
      when {
        branch 'main'
      }
      steps {
        script {
          dir('9 - AWS Services/aws-exercises/app') {
            if (fileExists('package.json')) {
              def versionType = input(
                id: 'versionType',
                message: 'Select the version increment type:',
                ok: 'Increment',
                parameters: [
                  choice(
                    name: 'type',
                    choices: ['patch', 'minor', 'major'],
                    description: 'Version increment type'
                  )
                ]
              )
              sh "npm version ${versionType}"
              def packageJson = readJSON file: 'package.json'
              def appVersion = packageJson.version
              def buildNumber = env.BUILD_NUMBER
              def imageVersion = "${appVersion}-${buildNumber}"
              env.IMAGE_VERSION = imageVersion
            } else {
                error "package.json file not found in the app directory"
            }
          }
        }
      }
    }

    stage('Run Tests') {
      steps {
        script {
          echo 'Run tests for the application...'
          dir('9 - AWS Services/aws-exercises/app') {
            sh 'npm install'
            catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
              def testResult = sh(script: 'npm test -- --detectOpenHandles', returnStatus: true)
              if (testResult != 0) {
                error "Tests failed. Please fix the failing tests and rerun the pipeline."
              }
            }
          }
        }
      }
    }

    stage('Build Image') {
      when {
        branch 'main'
      }
      steps {
        script {
          echo 'Build the Docker image with the incremented version...'
          dir('9 - AWS Services/aws-exercises') {
            sh "docker build -t ${DOCKERHUB_USERNAME}/${DOCKERHUB_REPO}:${IMAGE_VERSION} -f Dockerfile ."
          }
        }
      }
    }

    stage('Push Image') {
      when {
        branch 'main'
      }
      steps {
        script {
          echo 'Push the Docker image to a registry...'
          withCredentials([usernamePassword(credentialsId: 'docker-hub-access', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
            sh '''
                echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
                docker push ${DOCKER_USERNAME}/${DOCKERHUB_REPO}:${IMAGE_VERSION}
            '''
          }
        }
      }
    }

    stage('Commit Version') {
      when {
        branch 'main'
      }
      steps {
        script {
          echo 'Commit the version increment to Git...'
          sh 'git config --global user.email "jenkins@example.com"'
          sh 'git config --global user.name "Jenkins"'
          withCredentials([usernamePassword(credentialsId: 'github-pat', usernameVariable: 'GITHUB_USERNAME', passwordVariable: 'GITHUB_PAT')]) {
            def gitRepoUrl = env.GITHUB_REPO_URL
            sh "git remote set-url origin https://${GITHUB_USERNAME}:${GITHUB_PAT}@${gitRepoUrl.replace('https://', '')}"
            dir('9 - AWS Services/aws-exercises/app') {
              sh 'git add package.json'
            }
            sh "git commit -m 'Update version to ${IMAGE_VERSION}'"
            sh 'git push origin HEAD:main'
          }
        }
      }
    }

    stage('Deploy App') {
      when {
        branch 'main'
      }
      steps {
        script {
          echo 'Deploying the Docker image to the deployment server...'
          def deploymentImage = "${DOCKERHUB_USERNAME}/${DOCKERHUB_REPO}:${IMAGE_VERSION}"
          def deploymentScript = "bash ./server-commands.sh ${deploymentImage}"
          def deploymentTarget = "${DEPLOYMENT_USER}@${DEPLOYMENT_SEVER}"
          dir('9 - AWS Services/aws-exercises'){
            sshagent(['deployment-server-ssh']) {
              sh "scp -o StrictHostKeyChecking=no server-commands.sh ${deploymentTarget}:${DEPLOYMENT_PATH}"
              sh "scp -o StrictHostKeyChecking=no compose.yaml ${deploymentTarget}:${DEPLOYMENT_PATH}"
              sh "ssh -o StrictHostKeyChecking=no ${deploymentTarget} 'chmod +x ${DEPLOYMENT_PATH}/server-commands.sh'"
              sh "ssh -o StrictHostKeyChecking=no ${deploymentTarget} ${deploymentScript}"
            }
          }
        }
      }
    }
  }

  post {
    success {
        echo 'Pipeline executed successfully!'
    }
    failure {
        echo 'Pipeline execution failed!'
    }
  }
}
